name: Update Profile Metrics & README

on:
  # Update everything every 6 hours
  schedule: 
    - cron: "0 */6 * * *"
  # Allow manual triggering
  workflow_dispatch:
  # Trigger on pushes to main
  push:
    branches: ["main", "master"]
    paths: 
      - '.github/workflows/update-profile.yml'
      - 'README.gtpl'

jobs:
  update-profile:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      
    concurrency:
      group: profile-update-${{ github.ref }}
      cancel-in-progress: true
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Generate GitHub metrics SVG
        uses: lowlighter/metrics@latest
        with:
          # Your GitHub token with required scopes
          token: ${{ secrets.GH_PAT }}

          # Options
          user: dacrab
          template: classic
          base: header, activity, community, repositories, metadata
          config_timezone: Europe/Athens
          
          # Repositories configuration
          repositories_forks: yes
          repositories_affiliations: owner, collaborator, organization_member
          repositories_batch: 100
          
          # Activity configuration
          plugin_activity: yes
          plugin_activity_limit: 5
          plugin_activity_days: 14
          plugin_activity_visibility: all
          plugin_activity_timestamps: yes
          plugin_activity_filter: all
          
          # Languages plugin
          plugin_languages: yes
          plugin_languages_ignored: html, css, tex, less, dockerfile, makefile, qmake, lex, cmake, shell, gnuplot
          plugin_languages_limit: 8
          plugin_languages_sections: most-used, recently-used
          plugin_languages_colors: github
          plugin_languages_threshold: 0%
          plugin_languages_details: bytes-size, percentage, lines
          plugin_languages_analysis_timeout: 15
          plugin_languages_recent_days: 14
          plugin_languages_recent_load: 300
          
          # Additional plugins
          plugin_followup: yes
          plugin_followup_sections: repositories
          plugin_gists: yes
          
      - name: Generate README from template
        run: |
          # Get user info from GitHub API
          USER_DATA=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" "https://api.github.com/users/dacrab")
          USER_NAME=$(echo "$USER_DATA" | jq -r '.name // "Vaggelis Kavouras"')
          USER_BIO=$(echo "$USER_DATA" | jq -r '.bio // "Passionate developer building amazing projects"')
          REPO_COUNT=$(echo "$USER_DATA" | jq -r '.public_repos // "23"')
          
          # Get recent activity/events for "currently working on"
          EVENTS=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" "https://api.github.com/users/dacrab/events?per_page=50")
          WORKING_ON=$(echo "$EVENTS" | jq -r '
            [.[] | select(.type == "PushEvent" or .type == "PullRequestEvent" or .type == "CreateEvent") 
             | .repo.name] | unique | .[0:4] | 
            map("* [\(split("/")[1])](https://github.com/\(.)) - \(. as $repo | 
              if $repo == "dacrab/dacrab" then "My custom dynamic GitHub profile"
              elif $repo == "dacrab/dacrab.github.io" then "Portfolio built with Astro"
              elif $repo == "dacrab/clubos" then "POS system demo using Next.js & NeonDB"
              else "Recent project"
              end)") | join("\n")')
          
          # Get latest repositories (newest created, non-forked)
          REPOS=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" "https://api.github.com/users/dacrab/repos?sort=created&direction=desc&per_page=5")
          LATEST_PROJECTS=$(echo "$REPOS" | jq -r '
            [.[] | select(.fork == false and .size > 0) | .[0:3]] |
            map("* [**\(.name)**](\(.html_url)) - \(.description // "No description available")") | join("\n")')
          
          # Get recent pull requests (last 30 days)
          CUTOFF_DATE=$(date -d "30 days ago" +%Y-%m-%d)
          PRS=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" "https://api.github.com/search/issues?q=author:dacrab+type:pr+created:>${CUTOFF_DATE}&sort=created&order=desc&per_page=5")
          RECENT_PRS=$(echo "$PRS" | jq -r '
            if .items | length > 0 then
              [.items[0:5]] | map("* [\(.title | if length > 60 then .[0:60] + "..." else . end)](\(.html_url)) on [\(.repository_url | split("/")[-1])](\(.repository_url))") | join("\n")
            else
              "* No recent pull requests - time to contribute! 🔀"
            end')
          
          # Get recently starred repositories
          STARS=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" "https://api.github.com/users/dacrab/starred?sort=created&direction=desc&per_page=5")
          RECENT_STARS=$(echo "$STARS" | jq -r '
            if . | length > 0 then
              [.[0:5]] | map("* [\(.owner.login)/\(.name)](\(.html_url)) - \(.description // "No description available" | if length > 80 then .[0:80] + "..." else . end)") | join("\n")
            else
              "* No recent stars - discover some awesome repos! ⭐"
            end')
          
          # Get language stats from repositories
          LANG_REPOS=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" "https://api.github.com/users/dacrab/repos?per_page=100")
          TECH_STACK=$(echo "$LANG_REPOS" | jq -r '
            [.[] | select(.fork == false and .language != null and .size > 0) | .language] |
            group_by(.) | map({language: .[0], count: length}) | sort_by(.count) | reverse | .[0:8] |
            map(.language as $lang |
              if $lang == "JavaScript" then "![JavaScript](https://img.shields.io/badge/JavaScript-F7DF1E?style=for-the-badge&logoColor=white)"
              elif $lang == "TypeScript" then "![TypeScript](https://img.shields.io/badge/TypeScript-3178C6?style=for-the-badge&logoColor=white)"
              elif $lang == "Python" then "![Python](https://img.shields.io/badge/Python-3776AB?style=for-the-badge&logoColor=white)"
              elif $lang == "PHP" then "![PHP](https://img.shields.io/badge/PHP-777BB4?style=for-the-badge&logoColor=white)"
              elif $lang == "Astro" then "![Astro](https://img.shields.io/badge/Astro-FF5D01?style=for-the-badge&logoColor=white)"
              elif $lang == "CSS" then "![CSS](https://img.shields.io/badge/CSS-1572B6?style=for-the-badge&logoColor=white)"
              elif $lang == "HTML" then "![HTML](https://img.shields.io/badge/HTML-E34F26?style=for-the-badge&logoColor=white)"
              elif $lang == "Shell" then "![Shell](https://img.shields.io/badge/Shell-89e051?style=for-the-badge&logoColor=white)"
              elif $lang == "Go" then "![Go](https://img.shields.io/badge/Go-00ADD8?style=for-the-badge&logoColor=white)"
              else "![\($lang)](https://img.shields.io/badge/\($lang | @uri)-666666?style=for-the-badge&logoColor=white)"
              end) | join("\n")')
          
          # Social links
          SOCIAL_LINKS='<p align="left"><a href="https://github.com/dacrab" target="_blank" rel="noreferrer"><picture><source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/danielcranney/readme-generator/main/public/icons/socials/github-dark.svg" /><source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/danielcranney/readme-generator/main/public/icons/socials/github.svg" /><img src="https://raw.githubusercontent.com/danielcranney/readme-generator/main/public/icons/socials/github.svg" width="32" height="32" /></picture></a> <a href="https://www.linkedin.com/in/vkavouras/" target="_blank" rel="noreferrer"><picture><source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/danielcranney/readme-generator/main/public/icons/socials/linkedin-dark.svg" /><source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/danielcranney/readme-generator/main/public/icons/socials/linkedin.svg" /><img src="https://raw.githubusercontent.com/danielcranney/readme-generator/main/public/icons/socials/linkedin.svg" width="32" height="32" /></picture></a> <a href="https://www.instagram.com/killcrb/" target="_blank" rel="noreferrer"><picture><source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/danielcranney/readme-generator/main/public/icons/socials/instagram-dark.svg" /><source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/danielcranney/readme-generator/main/public/icons/socials/instagram.svg" /><img src="https://raw.githubusercontent.com/danielcranney/readme-generator/main/public/icons/socials/instagram.svg" width="32" height="32" /></picture></a></p>'
          
          # Contact info
          CONTACT_INFO="  - Website  : <https://dacrab.github.io>\n  - LinkedIn : <https://www.linkedin.com/in/vkavouras/>\n  - Email    : <vkavouras@proton.me>\n  - GitHub   : <https://github.com/dacrab>"
          
          # Generate README from template
          cp README.gtpl README.md
          sed -i "s/{{USERNAME}}/dacrab/g" README.md
          sed -i "s/{{USER_NAME}}/$USER_NAME/g" README.md
          sed -i "s/{{USER_BIO}}/$USER_BIO/g" README.md
          sed -i "s/{{REPO_COUNT}}/$REPO_COUNT/g" README.md
          
          # Use printf for multiline replacements
          printf '%s\n' "g/{{SOCIAL_LINKS}}/s/.*/$SOCIAL_LINKS/" w | ed -s README.md
          printf '%s\n' "g/{{WORKING_ON}}/s/.*/$(echo "$WORKING_ON" | sed 's/[[\.*^$()+?{|]/\\&/g')/" w | ed -s README.md
          printf '%s\n' "g/{{LATEST_PROJECTS}}/s/.*/$(echo "$LATEST_PROJECTS" | sed 's/[[\.*^$()+?{|]/\\&/g')/" w | ed -s README.md
          printf '%s\n' "g/{{RECENT_PRS}}/s/.*/$(echo "$RECENT_PRS" | sed 's/[[\.*^$()+?{|]/\\&/g')/" w | ed -s README.md
          printf '%s\n' "g/{{RECENT_STARS}}/s/.*/$(echo "$RECENT_STARS" | sed 's/[[\.*^$()+?{|]/\\&/g')/" w | ed -s README.md
          printf '%s\n' "g/{{TECH_STACK}}/s/.*/$(echo "$TECH_STACK" | sed 's/[[\.*^$()+?{|]/\\&/g')/" w | ed -s README.md
          printf '%s\n' "g/{{CONTACT_INFO}}/s/.*/$(echo "$CONTACT_INFO" | sed 's/[[\.*^$()+?{|]/\\&/g')/" w | ed -s README.md
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          
      - name: Check for changes
        id: git-check
        run: |
          git add .
          if git diff --cached --exit-code; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Commit and push updated files
        if: steps.git-check.outputs.changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -m "🔄 Auto-update profile content
          
          ✨ Updated:
          - GitHub metrics SVG with latest activity and statistics
          - README.md generated from template with current data
          
          Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          # Push with retry logic
          for i in {1..3}; do
            if git push; then
              echo "✅ Push successful on attempt $i"
              break
            else
              echo "⚠️ Push failed on attempt $i, retrying..."
              git fetch origin
              git pull --rebase origin main || git pull --rebase origin master || true
              sleep 5
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}